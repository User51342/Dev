//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.26720.2
// 
namespace WlanDetection.SignalService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignalDto", Namespace="http://schemas.datacontract.org/2004/07/WLanDetectionServer.Entities")]
    public partial class SignalDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<double> AltitudeField;
        
        private double LatitudeField;
        
        private double LongitureField;
        
        private System.DateTime RecordTimeField;
        
        private System.Collections.ObjectModel.ObservableCollection<WlanDetection.SignalService.WifiSignalDto> WifiSignalsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longiture {
            get {
                return this.LongitureField;
            }
            set {
                if ((this.LongitureField.Equals(value) != true)) {
                    this.LongitureField = value;
                    this.RaisePropertyChanged("Longiture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RecordTime {
            get {
                return this.RecordTimeField;
            }
            set {
                if ((this.RecordTimeField.Equals(value) != true)) {
                    this.RecordTimeField = value;
                    this.RaisePropertyChanged("RecordTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<WlanDetection.SignalService.WifiSignalDto> WifiSignals {
            get {
                return this.WifiSignalsField;
            }
            set {
                if ((object.ReferenceEquals(this.WifiSignalsField, value) != true)) {
                    this.WifiSignalsField = value;
                    this.RaisePropertyChanged("WifiSignals");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WifiSignalDto", Namespace="http://schemas.datacontract.org/2004/07/WLanDetectionServer.Entities")]
    public partial class WifiSignalDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ChannelCenterFrequencyInKilohertzField;
        
        private string MacAddressField;
        
        private string NetworkAuthenticationTypeField;
        
        private string NetworkEncryptionTypeField;
        
        private string NetworkKindField;
        
        private double NetworkRssiInDecibelMilliwattsField;
        
        private string PhysicalKindField;
        
        private byte SignalBarsField;
        
        private string SsidField;
        
        private int WifiSignalIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChannelCenterFrequencyInKilohertz {
            get {
                return this.ChannelCenterFrequencyInKilohertzField;
            }
            set {
                if ((this.ChannelCenterFrequencyInKilohertzField.Equals(value) != true)) {
                    this.ChannelCenterFrequencyInKilohertzField = value;
                    this.RaisePropertyChanged("ChannelCenterFrequencyInKilohertz");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MacAddress {
            get {
                return this.MacAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.MacAddressField, value) != true)) {
                    this.MacAddressField = value;
                    this.RaisePropertyChanged("MacAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkAuthenticationType {
            get {
                return this.NetworkAuthenticationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.NetworkAuthenticationTypeField, value) != true)) {
                    this.NetworkAuthenticationTypeField = value;
                    this.RaisePropertyChanged("NetworkAuthenticationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkEncryptionType {
            get {
                return this.NetworkEncryptionTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.NetworkEncryptionTypeField, value) != true)) {
                    this.NetworkEncryptionTypeField = value;
                    this.RaisePropertyChanged("NetworkEncryptionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkKind {
            get {
                return this.NetworkKindField;
            }
            set {
                if ((object.ReferenceEquals(this.NetworkKindField, value) != true)) {
                    this.NetworkKindField = value;
                    this.RaisePropertyChanged("NetworkKind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NetworkRssiInDecibelMilliwatts {
            get {
                return this.NetworkRssiInDecibelMilliwattsField;
            }
            set {
                if ((this.NetworkRssiInDecibelMilliwattsField.Equals(value) != true)) {
                    this.NetworkRssiInDecibelMilliwattsField = value;
                    this.RaisePropertyChanged("NetworkRssiInDecibelMilliwatts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhysicalKind {
            get {
                return this.PhysicalKindField;
            }
            set {
                if ((object.ReferenceEquals(this.PhysicalKindField, value) != true)) {
                    this.PhysicalKindField = value;
                    this.RaisePropertyChanged("PhysicalKind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SignalBars {
            get {
                return this.SignalBarsField;
            }
            set {
                if ((this.SignalBarsField.Equals(value) != true)) {
                    this.SignalBarsField = value;
                    this.RaisePropertyChanged("SignalBars");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ssid {
            get {
                return this.SsidField;
            }
            set {
                if ((object.ReferenceEquals(this.SsidField, value) != true)) {
                    this.SsidField = value;
                    this.RaisePropertyChanged("Ssid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WifiSignalId {
            get {
                return this.WifiSignalIdField;
            }
            set {
                if ((this.WifiSignalIdField.Equals(value) != true)) {
                    this.WifiSignalIdField = value;
                    this.RaisePropertyChanged("WifiSignalId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SignalService.ISignalService")]
    public interface ISignalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignalService/Save", ReplyAction="http://tempuri.org/ISignalService/SaveResponse")]
        System.Threading.Tasks.Task<int> SaveAsync(WlanDetection.SignalService.SignalDto signals);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISignalServiceChannel : WlanDetection.SignalService.ISignalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignalServiceClient : System.ServiceModel.ClientBase<WlanDetection.SignalService.ISignalService>, WlanDetection.SignalService.ISignalService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SignalServiceClient() : 
                base(SignalServiceClient.GetDefaultBinding(), SignalServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISignalService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SignalServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(SignalServiceClient.GetBindingForEndpoint(endpointConfiguration), SignalServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SignalServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SignalServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SignalServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SignalServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SignalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<int> SaveAsync(WlanDetection.SignalService.SignalDto signals) {
            return base.Channel.SaveAsync(signals);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISignalService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISignalService)) {
                return new System.ServiceModel.EndpointAddress("http://127.0.0.1:81/wlandetectionservice/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return SignalServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISignalService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return SignalServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISignalService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ISignalService,
        }
    }
}
